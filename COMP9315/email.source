---------------------------------------------------------------------------
--
-- email.sql-
-- src/tutorial/email.source
--
---------------------------------------------------------------------------



CREATE FUNCTION email_in(cstring)
   RETURNS EmailAddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_out(EmailAddress)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;


CREATE FUNCTION email_recv(internal)
   RETURNS EmailAddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;


CREATE FUNCTION email_send(EmailAddress)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE EmailAddress (
   input = email_in,
   output = email_out,
   receive = email_recv,
   send = email_send,
   storage = plain,
   INTERNALLENGTH = 260
);


-- define the required operators
CREATE FUNCTION email_lt(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_lt_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_not_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_gt_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_gt(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

--domain compare declaration
CREATE FUNCTION email_domain_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_not_domain_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;


--create and register the operator to the EmaillAddress type
CREATE OPERATOR < (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_lt_eq,
   commutator = >= , negator = > ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR = (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_eq,
   commutator = = ,
   negator = <> ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR <> (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_not_eq,
   commutator = <> ,
   negator = = ,
   restrict = neqsel, join = neqjoinsel
);
CREATE OPERATOR >= (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_gt_eq,
   commutator = <= , negator = < ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR > (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);

-- create operator for domain comparison
CREATE OPERATOR ~ (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_domain_eq,
   commutator = ~ ,
   negator = !~ ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR !~ (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_not_domain_eq,
   commutator = !~ ,
   negator = ~ ,
   restrict = neqsel, join = neqjoinsel
);


-- create the support function too
-- for btree
CREATE FUNCTION email_cmp(EmailAddress, EmailAddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

--for hash
CREATE FUNCTION email_hash(EmailAddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

-- now we can make the operator class
-- for btree
CREATE OPERATOR CLASS email_ops_btree
    DEFAULT FOR TYPE EmailAddress USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       email_cmp(EmailAddress, EmailAddress);

-- for hash
CREATE OPERATOR CLASS email_ops_hash
    DEFAULT FOR TYPE EmailAddress USING hash AS
    OPERATOR    1   =  ,
    FUNCTION    1   email_hash(EmailAddress);


-- clean up the example
--DROP TYPE EmailAddress CASCADE;

